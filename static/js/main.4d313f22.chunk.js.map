{"version":3,"sources":["Login.js","theme/ResetStyles.js","theme/GlobalStyles.js","App.js","serviceWorker.js","index.js"],"names":["Rectangle","styled","div","withRouter","props","useState","console","log","className","createGlobalStyle","App","ResetStyles","GlobalStyles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"s5BAKA,IAAMA,EAAYC,IAAOC,IAAV,KAmFAC,mBA1Cf,SAAeC,GAAQ,IAAD,EACQC,mBAAS,MADjB,mBAYpB,OAZoB,UAUpBC,QAAQC,IAAIH,GAGV,yBAAKI,UAAU,SAIb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SACb,uBAAGA,UAAU,YAAb,8CACA,uBAAGA,UAAU,YAAb,+BAEF,yBAAKA,UAAU,UAEjB,yBAAKA,UAAU,SACf,kBAACR,EAAD,KACE,yBAAKQ,UAAU,WACf,yBAAKA,UAAU,cAQb,uBAAGA,UAAU,WAAb,sE,syCC/EKC,kBAAf,K,0tBCAeA,kBAAf,KCwBeC,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKF,UAAU,OACb,kBAAC,EAAD,OAQF,kBAACG,EAAD,MACA,kBAACC,EAAD,QCTcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4d313f22.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n// import QrReader from \"react-qr-reader\";\nimport { withRouter } from \"react-router-dom\";\n\nconst Rectangle = styled.div`\n  position: fixed;\n  padding: 5vh 5vh 5vh 0;\n  max-width: 100vw;\n  height: 43vh;\n  left: 0;\n  bottom: 10vh;\n  background-color: #000000;\n  display: flex;\n\n  .circle {\n    position: relative;\n    background-color: white;\n    width: 30vh;\n    height: 30vh;\n    border-radius: 50%;\n    margin-left: -5vh;\n    left: -15vh;\n  }\n\n  .qr-wrapper {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .qr-text {\n    letter-spacing: 0.5px;\n    text-align: center;\n    margin-top: 10px;\n    color: #cfcfcf;\n    font-size: 24px;\n  }\n`;\n\n// const QRScanner = styled(QrReader)`\n//   width: 30vh;\n//   height: 30vh;\n//   border: solid 3px #aaaaaa;\n// `;\n\nfunction Login(props) {\n  const [result, setResult] = useState(null);\n  const onScan = data => {\n    if (data) {\n      setResult(data);\n      alert(`我掃到的資料是：${data}`);\n      props.history.push(\"/profile\");\n    }\n  };\n\n  console.log(props);\n\n  return (\n    <div className=\"login\">\n      {/* <p>\n        <bold>{result}</bold>\n      </p> */}\n      <div className=\"Oval-Copy\">\n        <div className=\"title\">\n          <p className=\"CH-Title\">IPATH 學生點數系統</p>\n          <p className=\"EN-Title\">IPATH Student Point System</p>\n        </div>\n        <div className=\"desh\"></div>\n      </div>\n      <div className=\"Oval\"></div>\n      <Rectangle>\n        <div className=\"circle\" />\n        <div className=\"qr-wrapper\">\n          {/* <QRScanner\n            delay={300}\n            onError={err => alert(err)}\n            onScan={onScan}\n            showViewFinder={false}\n            facingMode=\"environment\"\n          /> */}\n          <p className=\"qr-text\">請掃描登入使用者身份</p>\n        </div>\n      </Rectangle>\n    </div>\n  );\n}\n\nexport default withRouter(Login);","import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n  /* http://meyerweb.com/eric/tools/css/reset/ \n    v2.0 | 20110126\n    License: none (public domain)\n  */\n\n  html, body, div, span, applet, object, iframe,\n  h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n  a, abbr, acronym, address, big, cite, code,\n  del, dfn, em, img, ins, kbd, q, s, samp,\n  small, strike, strong, sub, sup, tt, var,\n  b, u, i, center,\n  dl, dt, dd, ol, ul, li,\n  fieldset, form, label, legend,\n  table, caption, tbody, tfoot, thead, tr, th, td,\n  article, aside, canvas, details, embed, \n  figure, figcaption, footer, header, hgroup, \n  menu, nav, output, ruby, section, summary,\n  time, mark, audio, video {\n    margin: 0;\n    padding: 0;\n    border: 0;\n    font-size: 100%;\n    font: inherit;\n    vertical-align: baseline;\n  }\n  /* HTML5 display-role reset for older browsers */\n  article, aside, details, figcaption, figure, \n  footer, header, hgroup, menu, nav, section {\n    display: block;\n  }\n  body {\n    line-height: 1;\n  }\n  ol, ul {\n    list-style: none;\n  }\n  blockquote, q {\n    quotes: none;\n  }\n  blockquote:before, blockquote:after,\n  q:before, q:after {\n    content: '';\n    content: none;\n  }\n  table {\n    border-collapse: collapse;\n    border-spacing: 0;\n  }\n`;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport default createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  html {\n    background-color: #e8e8e8;\n    font-size: 14px; /* 1em = 14px */\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'PingFang SC', 'Hiragino Sans GB',\n  'Microsoft YaHei', 'Helvetica Neue', Helvetica, Arial, sans-serif, 'Apple Color Emoji',\n  'Segoe UI Emoji', 'Segoe UI Symbol';\n  }\n\n  html, body {\n    width: 100vw;\n    height: 100vh;\n  }\n\n  p {\n    padding: 0;\n    margin: 0;\n  }\n\n  ol, ul {\n    list-style: none;\n  }\n\n  input, button {\n    outline: none;\n    border: none;\n\n    &:focus {\n      outline: none;\n    }\n  }\n  \n  a {\n    color: inherit;\n  }\n`;\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Login from './Login';\nimport ResetStyles from './theme/ResetStyles';\nimport GlobalStyles from './theme/GlobalStyles';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Login />\n        {/* <Switch> */}\n          {/* <Route path='/PATH' exact component={Login} /> */}\n          {/* <Route path='/profile' component={Profile} />\n          <Route path='/shop' component={Shop} />\n          <Route path='/event' component={Event} /> */}\n        {/* </Switch> */}\n      </div>\n      <ResetStyles />\n      <GlobalStyles />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// const Instascan = require('instascan');\n// let scanner = new Instascan.Scanner({video: document.getElementById('scanner')});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}